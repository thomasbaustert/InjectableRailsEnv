= InjectableRailsEnv

Allows injecting the Rails env into a class for testing purpose.

As described in TODO(link to blog) it is not that easy to simulate a special Rails environment
like production or development during tests. This gem may help.

= Installation

Via Bundler:

  # path/to/railsapp/Gemfile
  gem 'injectable_rails_env'

  $ bundle install

= Usage

== On instance level

Include the module into your class under test and replace all occurrences
of <tt>Rails.env.production?</tt> with <tt>rails_env_production?</tt>:

  # app/controllers/jobs_controller.rb
  class JobsController < ApplicationController
    include InjectableRailsEnv

    before_filter :authenticate

    def index
      ...
    end

    private

    def authenticate
      return unless rails_env_production? # intead of Rails.env.production?
      redirect_to login_url unless logged_in?
    end

  end

Now you can simulate the Rails env via <tt>rails_env=</tt>:

  # spec/controllers/jobs_controller.rb
  describe JobsController do

    context "Rails env is production" do

      it "requests authentication" do
        @controller.rails_env = "production"

        get :index
        response.should be_redirect
        response.should redirect_to login_url
      end
    end

    context "Rails env is non production" do

      it "allows access without authentication" do
        @controller.rails_env = "non-production"

        get :index
        response.should be_success
        response.should render_template "index"
      end
    end
  end

== On class level

This is not supported cause it won't work. Consider the following example:

  # app/controllers/jobs_controller.rb
  class JobsController < ApplicationController
    include InjectableRailsEnv

    before_filter(:authenticate) if rails_env_production?
    ...
  end

When running the specs the <tt>JobsController</tt> code is executed before the spec starts
and <tt>rails_env</tt> has not been set. Therefore <tt>rails_env_production?</tt> will always
return the value of <tt>Rails.env.production?</tt>.

You have to change your code from using <tt>rails_env_production?</tt> on the class level
to using it on the instance level (like in the example above in <tt>authenticate</tt>).

= Supported Environments

Supported environments are test, development, production, stating, integration and ci.
So for each there is a method <tt>rails_env_ENV?</tt>.

= Contact

For comments and question feel free to contact me: business@thomasbaustert.de

If you are using the plugin, consider recommending me at workingwithrails.com:
http://workingwithrails.com/person/6131-thomas-baustert

Copyright (c) 2012 [Thomas Baustert], released under the MIT license
